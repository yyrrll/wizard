Exercise 2.54.  Two lists are said to be equal? if they contain equal elements arranged in the same order. For example,

(equal? '(this is a list) '(this is a list))

is true, but

(equal? '(this is a list) '(this (is a) list))

is false. To be more precise, we can define equal? recursively in terms of the
basic eq? equality of symbols by saying that a and b are equal? if they are
both symbols and the symbols are eq?, or if they are both lists such that (car
a) is equal? to (car b) and (cdr a) is equal? to (cdr b). 

Using this idea, implement equal? as a procedure.


Note 36

In practice, programmers use equal? to compare lists that contain numbers as
well as symbols. Numbers are not considered to be symbols. The question of
whether two numerically equal numbers (as tested by =) are also eq? is highly
implementation-dependent. A better definition of equal? (such as the one that
comes as a primitive in Scheme) would also stipulate that if a and b are both
numbers, then a and b are equal? if they are numerically equal. 


nb: book does not give predicate symbol? (in lecture notes)
- use (not (pair? x)) to check if something is a symbol
    - presumes that objects are either pairs (lists) or symbols

base: 
    both symbols 
        and eq? -- true
    one symbol, one list
        -- false
    (not lists? not pair?)

reduction:
    both lists
        (equal? (car a) (car b))
        (equal? (cdr a) (cdr b))

one list, one not -- not equal?


(define (equal? a b)

