2  Building Abstractions with Data


"procedural abstraction"

    introduced in 1.1.8
    details of procedure implementation can be suppressed, and the particular
    procedure replaced by any other procedure that behaves in the same overall
    way

    abstraction separates usage of a procedure from details of how it is
    implemented in terms of more primitive procedures


"compound data"

    analogous for data
    data abstraction

2.1  Introduction to Data Abstraction


"data abstraction"

    "methodology that enables us to isolate how a compound data object is used
    from the details of how it is constructed from more primitive data objects"

concrete data

    defined independent of programs using data


"selectors"
"constructors"

    procedures "that implementing the abstract data in terms of concrete representation"

    this is the 
        "interface" 
            between programs that implement data and programs that use data (?)
            set of procedures -- selectors, constructors



2.1.1  Example: Arithmetic Operations for Rational Numbers

"data abstraction"

    "use data in such a way as to make no assumptions about the data that are
    not strictly necessary for performing the task at hand"


"concrete data representation"

    defined independent of the programs that use the data


"interface"

    set of procedures, "selectors" and "constructors", that implement the
    abstract data in terms of the concrete representation

        TODO: revisit these definitions in greater clarity at end of section / chapter

"constructor"


    procedure that returns the representation (?) of the data

        eg, << make-rat >> returns (? representation ?) rational number with numerator "n" and denominator "d"

"selector"

    returns particular information from the data

        eg << numer >> returns the numerator of a rational number (? from its representation, yes?)



"wishful thinking"

    "powerful strategy of synthesis"
    - just _saying_ these constructors and selectors exist
    - express the rules rational numbers in for them in procedures that assume the interface exists
        
    - define them later


"pair"

    compound structure (definition?) 
    constructured by << cons >>
    puts two arguments into a data object
    allows implementation of concrete level of the data abstraction

        q? "concrete level" means . . . . ?


<< cons >>

    primitive procedure (yes?) creating a pair from two arguments 


<< car >>

    primitive procedure 
    retrieves first item in a pair


<< cdr >>

    primitive procedure 
    retrieves second / last item in a pair


"list-structured data"

    "data objects constructed from pairs"


NOTE 4

    << display >>

        primite for printing data

    << newline >>

        primitive for starts a new line for printing

    neither returns a useful value


2.1.2 Abstraction Barriers

"abstraction barriers"

    isolate different "levels" of the system
    separates the programs that use the data abstraction (above the line / barrier) from the programs that implement the abstration (below)
    - programs using representation use only the "public procedures" of the package; these perform mathematical operations
    - the implementation details of the implementing programs are irrelevant to using programs 

    "procedures at each level are the interfaces that define the abstraction barriers and connect the different levels"

    advantages:

        simplifies modification and maintenance
        - just change underlying, consuming doesn't care


