1.3 Formulating Abstractions with Higher-Order Procedures

"higher-order procedures"

    "procedures that manipulate procedures"


1.3.1 Procedures as Arguments

"summation of a series"

    mathematicians' abstraction for summing items in a series
    described with "sigma notation"
    - allows mathematicians to deal with the concept of summation rather than particular sums
        - formulate general results about sums, independent of any particular sum
        - as programmers, we want a similar concept



1.3.2 Constructing Procedures Using Lambda

<< lambda >> -- special form

    creates procedures

        (lambda (x) (+ x 4))

        can create a procedure in-line, within a << define >> block
        - allows expression of a procedure, relying on another procedure, without an auxiliary definition of that relied-upon procedure

    "lambda is used to create procedures in the same way as << define >>, except that no name is specified for the procedure"

    general form:

        (lambda (<formal-parameters>) <body>)

        returns a procedure


<< let >> -- special form


    general form of << let >> expression

        (let (( < var 1 > < exp 1 >)
              ( < var 2 > < exp 2 >)
              . . . 
              () < var n > < exp n >))
            < body >


        eg -- let var1 have value exp1, var2 value exp2, in <body>

        "the body of the let is evaluated evaluated with these names bound as local variables"
        - << let >> interpreted as alternate syntax for 

            ((lambda (<var1> . . . <varN>)
                <body>)
             <exp1>
             ...
             <expN>)


1.3.3 Procedures as General Methods

	higher-order procedures allow more powerful abstraction: procedures used
	to express general methods of computation


    "half-interval method"

		technique for finding roots of an equation where f(x) = 0, and is a
		continuous function - if f(a) < 0 < f(b), there must be a number
		between a and b for which f(x) is zero

        let x be average of a and b
        - replace a or b with x
            - if f(x) > 0, replace b with x
            - if f(x) < 0, replace a with x
        - recalculate

        f(x) approaches zero
        - stop when within small enough interval

        number of steps is big O (log(L/T))
        - L is length of initial interval bw a and b
        - T is error tolerance (small enough interval)

<< negative? >> -- lisp

    procedure / logical test
    takes one argument, tests if negative or positive
                       

    "fixed point of a function"

        a number x is called a fixed point of function x if x
		satisfies f(x) = x

		for some functions, we can locate a fixed point by beginning with a
		guess and applying f repeatedly

            eg, f( f( f(x) ) )



1.3.4 Procecdures as Retured Values

". . . compound procedures are a crucial abstraction mechanism, because they
permit us to express general methods of computing as explicit elements in our
programming language. Now we've seen how higher-order procedures permit us to
manipulate these general methods to create further abstractions."	p. 102

" . . . it is important to be able to think in terms of these abstractions, so
that we can be ready to apply them in new contexts"

"first class status"

"Elements with the fewest restrictions are said to have first-class status.
Some of the ``rights and privileges'' of first-class elements are:

    They may be named by variables.
    They may be passed as arguments to procedures.
    They may be returned as the results of procedures.
    They may be included in data structures. "


1.3.10 (? no such section?)


READ

    computer converts expression into appropriate internal form

EVALUATE

    reduces expression to value -- perhaps recursively

PRINT
    
    convert result to human readable form, output to screen


for names, EVALUATE looks up the name, gets the value, and PRINTS that

for special forms, generally there is no print, as we don't care about the result of the evaluation
-   point was creation of name in environment




BELONGS IN OTHER OUTLINE:

<< define >>

    naming procedures 

    general form:

    (define <name> expression)

    assigns expression to name

